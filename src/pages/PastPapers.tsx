"use client"
import { useState, useCallback, useRef } from "react"
import type React from "react"

import { Layout } from "@/components/layout/Layout"
import { PDFViewer } from "@/components/pdf/PDFViewer"
import { Button, ButtonProps } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { useToast } from "@/hooks/use-toast"
import {
  FileText,
  ClipboardList,
  CheckSquare,
  ChevronRight,
  Home,
  BookOpen,
  Calendar,
  ArrowLeft,
  Eye,
  GraduationCap,
  Clock,
  FileX,
  BarChart3,
  PenSquare,
  LucideProps,
} from "lucide-react"

// This file is generated by `scripts/generate-paper-data.js`
import allPapersData from "@/data/papers.json"

// --- TYPE DEFINITIONS ---
interface PDFFileData {
  name: string
  path: string
}
interface PaperSet {
  id: string
  series: string
  qp: PDFFileData | null
  ms: PDFFileData | null
  in: PDFFileData | null
}
interface YearData {
  sessionDocs: {
    er: PDFFileData | null
    gt: PDFFileData | null
  }
  paperList: PaperSet[]
}
type PapersData = {
  [subject:string]: { [session:string]: { [year:string]: YearData } }
}
type LinkClickHandler = (e: React.MouseEvent<HTMLAnchorElement>, pdf: PDFFileData | null, type: 'qp' | 'ms' | 'in', paperSet: PaperSet) => void;


// --- HELPER UI COMPONENTS ---

const FileButton = ({
  pdf,
  icon: Icon,
  label,
  onLinkClick,
  variant,
  className,
}: {
  pdf: PDFFileData | null
  icon: React.ElementType<LucideProps>
  label: string
  onLinkClick: (e: React.MouseEvent<HTMLAnchorElement>, pdf: PDFFileData | null) => void;
} & ButtonProps) => {
  if (!pdf) {
    return (
      <Button className="w-full justify-between opacity-50 bg-transparent" variant="outline" disabled>
        <div className="flex items-center gap-2">
          <FileX className="h-4 w-4" /> <span>{label}</span>
        </div>
        <span className="text-xs">Not Available</span>
      </Button>
    )
  }
  return (
    <Button asChild variant={variant} className={`w-full justify-between group transition-colors ${className}`}>
      <a href={pdf.path} onClick={(e) => onLinkClick(e, pdf)} target="_blank" rel="noopener noreferrer" className="cursor-pointer">
        <div className="flex items-center gap-2">
          <Icon className="h-4 w-4" /> <span className="font-medium">{label}</span>
        </div>
        <Eye className="h-4 w-4 group-hover:scale-110 transition-transform" />
      </a>
    </Button>
  )
}

const PaperCard = ({ paper, groupName, onLinkClick }: { paper: PaperSet; groupName: string; onLinkClick: LinkClickHandler }) => (
  <Card className="flex flex-col hover:shadow-lg transition-all duration-300 border-2 hover:border-primary/30">
    <CardHeader className="p-3 pb-2">
      <div className="flex items-center gap-3">
        <div className="p-1.5 bg-primary/10 rounded-md">
          <GraduationCap className="h-5 w-5 text-primary" />
        </div>
        <div>
          <CardTitle className="text-base font-bold">{paper.series.replace(groupName, "").trim() || "Main Variant"}</CardTitle>
          <CardDescription className="text-xs">{paper.id}</CardDescription>
        </div>
      </div>
    </CardHeader>
    <CardContent className="space-y-2 flex-grow flex flex-col justify-end p-3 pt-0">
      <FileButton pdf={paper.qp} icon={FileText} label="Question Paper" onLinkClick={(e, pdf) => onLinkClick(e, pdf, 'qp', paper)} className="hover:bg-blue-600" />
      <FileButton pdf={paper.ms} icon={CheckSquare} label="Mark Scheme" onLinkClick={(e, pdf) => onLinkClick(e, pdf, 'ms', paper)} variant="outline" className="hover:bg-green-600 bg-transparent" />
      {paper.in && <FileButton pdf={paper.in} icon={ClipboardList} label="Insert" onLinkClick={(e, pdf) => onLinkClick(e, pdf, 'in', paper)} variant="outline" className="hover:bg-purple-600 bg-transparent" />}
    </CardContent>
  </Card>
)

const SessionDocuments = ({ er, gt, onLinkClick }: { er: PDFFileData | null; gt: PDFFileData | null; onLinkClick: LinkClickHandler }) => {
  if (!er && !gt) return null
  const dummyPaperSet: PaperSet = { id: 'session-docs', series: 'Session Documents', qp: null, ms: null, in: null };
  return (
    <div className="max-w-4xl mx-auto p-4 border rounded-lg bg-muted/20">
      <h3 className="text-lg font-semibold mb-4 text-center">Session Documents</h3>
      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        {er && <FileButton pdf={er} icon={PenSquare} label="Examiner Report" onLinkClick={(e, pdf) => onLinkClick(e, pdf, 'in', dummyPaperSet)} className="flex-1 hover:bg-orange-600" />}
        {gt && <FileButton pdf={gt} icon={BarChart3} label="Grade Thresholds" onLinkClick={(e, pdf) => onLinkClick(e, pdf, 'in', dummyPaperSet)} className="flex-1 hover:bg-indigo-600" />}
      </div>
    </div>
  )
}

const EmptyState = ({ icon: Icon, title, message }: { icon: React.ElementType<LucideProps>; title: string; message: string }) => (
  <div className="text-center py-12">
    <div className="mx-auto mb-4 p-4 bg-muted/50 rounded-full w-fit">
      <Icon className="h-12 w-12 text-muted-foreground" />
    </div>
    <h3 className="text-xl font-semibold mb-2">{title}</h3>
    <p className="text-muted-foreground max-w-md mx-auto">{message}</p>
  </div>
)

const Breadcrumbs = ({ steps, onNavigate }: { steps: string[]; onNavigate: (index: number) => void }) => (
  <div className="bg-muted/30 rounded-lg p-4 mb-8">
    <nav className="flex items-center space-x-2 text-sm">
      <button onClick={() => onNavigate(0)} className="flex items-center gap-2 px-3 py-1.5 rounded-md hover:bg-primary/10 hover:text-primary transition-all duration-200 font-medium">
        <Home className="h-4 w-4" /> Past Papers
      </button>
      {steps.map((step, index) => (
        <div key={index} className="flex items-center space-x-2">
          <ChevronRight className="h-4 w-4 text-muted-foreground" />
          <button onClick={() => onNavigate(index + 1)} className={`px-3 py-1.5 rounded-md transition-all duration-200 ${ index === steps.length - 1 ? "bg-primary text-primary-foreground font-medium" : "hover:bg-primary/10 hover:text-primary text-muted-foreground"}`} disabled={index === steps.length - 1}>{step}</button>
        </div>
      ))}
    </nav>
  </div>
)

const LoadingOverlay = () => (
  <div className="fixed inset-0 bg-background/95 backdrop-blur-sm flex items-center justify-center z-50">
    <div className="bg-card p-8 rounded-xl shadow-lg border flex flex-col items-center gap-4">
      <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent" />
      <div className="text-center">
        <h3 className="text-lg font-semibold">Loading Paper</h3>
        <p className="text-sm text-muted-foreground">Please wait while we fetch your document...</p>
      </div>
    </div>
  </div>
)

const SessionSelector = ({ subject, sessions, onSelectSession }: { subject: string; sessions: string[]; onSelectSession: (session: string) => void }) => {
  const [isHovered, setIsHovered] = useState(false)
  const timeoutRef = useRef<NodeJS.Timeout | null>(null)
  const handleMouseEnter = () => { if (timeoutRef.current) clearTimeout(timeoutRef.current); setIsHovered(true) }
  const handleMouseLeave = () => { timeoutRef.current = setTimeout(() => setIsHovered(false), 200) }
  return (
    <Card className="group relative flex flex-col justify-center items-center overflow-hidden hover:shadow-xl hover:border-primary/50 transition-all duration-300 transform hover:-translate-y-2 cursor-pointer min-h-[260px]" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>
      <div className={`transition-all duration-300 ease-in-out w-full text-center p-6 flex flex-col items-center justify-center ${isHovered ? "opacity-0 -translate-y-4" : "opacity-100 translate-y-0"}`}>
        <div className="mx-auto mb-4 p-4 bg-primary/10 rounded-full w-fit group-hover:bg-primary/20 transition-colors group-hover:scale-110 duration-300"><BookOpen className="h-10 w-10 text-primary" /></div>
        <h3 className="text-xl font-bold group-hover:text-primary transition-colors">{subject}</h3>
        <p className="text-sm text-muted-foreground mt-1">Hover to explore sessions</p>
      </div>
      <div className={`absolute inset-0 p-4 flex flex-col items-center justify-center transition-all duration-300 ease-in-out ${isHovered ? "opacity-100 translate-y-0" : "opacity-0 translate-y-4 pointer-events-none"}`}>
        <h4 className="text-lg font-semibold mb-4 text-primary">Select Session</h4>
        {sessions.length > 0 ? (
          <div className="space-y-2 w-full max-w-[85%] mx-auto">
            {sessions.map((session) => (
              <Button key={session} variant="ghost" className="w-full flex justify-between items-center p-3 h-auto hover:bg-primary/10" onClick={() => onSelectSession(session)}>
                <div className="flex items-center gap-3"><Calendar className="h-5 w-5 text-primary" /><span className="font-medium">{session}</span></div><ChevronRight className="h-4 w-4 text-muted-foreground" />
              </Button>
            ))}
          </div>
        ) : (<p className="text-sm text-muted-foreground text-center px-4">No sessions available.</p>)}
      </div>
    </Card>
  )
}

// --- MAIN PAST PAPERS COMPONENT ---
const PastPapers = () => {
  const [view, setView] = useState<"subjects" | "years" | "papers">("subjects")
  const [selectedSubject, setSelectedSubject] = useState<string | null>(null)
  const [selectedSession, setSelectedSession] = useState<string | null>(null)
  const [selectedYear, setSelectedYear] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const { toast } = useToast()

  const [activePaper, setActivePaper] = useState<{
    set: PaperSet;
    initialFile: File;
    initialFileType: 'qp' | 'ms' | 'in';
  } | null>(null);

  const papers: PapersData = allPapersData
  const subjects = Object.keys(papers)

  const handleSelectSession = (subject: string, session: string) => {
    setSelectedSubject(subject); setView("years"); setSelectedSession(session)
  }
  const handleSelectYear = (year: string) => {
    setSelectedYear(year); setView("papers")
  }
  const handleBack = () => {
    if (view === "papers") setView("years")
    else if (view === "years") { setView("subjects"); setSelectedSubject(null); setSelectedSession(null) }
  }
  const handleBreadcrumbNavigate = (index: number) => {
    if (index === 0) { setView("subjects"); setSelectedSubject(null); setSelectedSession(null); setSelectedYear(null) }
    else if (index === 1) { setView("years"); setSelectedYear(null) }
  }

  const handleViewPdf = useCallback(async (
    pdf: PDFFileData | null,
    type: 'qp' | 'ms' | 'in',
    paperSet: PaperSet
  ) => {
    if (!pdf) return;
    setIsLoading(true);
    toast({ title: "Loading PDF...", description: `Fetching ${pdf.name}` });
    try {
      const response = await fetch(pdf.path);
      if (!response.ok) throw new Error(`Failed to fetch PDF: ${response.statusText}`);
      const file = new File([await response.blob()], pdf.name, { type: "application/pdf" });
      
      setActivePaper({ set: paperSet, initialFile: file, initialFileType: type });

      toast({ title: "Success!", description: "PDF loaded successfully" });
    } catch (error) {
      console.error("Error loading pre-defined PDF:", error);
      toast({ title: "Error", description: "Could not load the selected PDF.", variant: "destructive" });
    } finally {
      setIsLoading(false);
    }
  }, [toast]);

  const handleLinkClick: LinkClickHandler = (e, pdf, type, paperSet) => {
    if (e.button !== 0 || e.metaKey || e.ctrlKey) return;
    e.preventDefault();
    handleViewPdf(pdf, type, paperSet);
  };

  const handleCloseViewer = useCallback(() => setActivePaper(null), []);

  if (activePaper) {
    return (
      <PDFViewer
        initialFile={activePaper.initialFile}
        paperSet={activePaper.set}
        initialFileType={activePaper.initialFileType}
        onClose={handleCloseViewer}
      />
    );
  }

  const renderContent = () => {
    switch (view) {
      case "years": {
        const years = selectedSubject && selectedSession ? Object.keys(papers[selectedSubject][selectedSession]).sort((a, b) => Number.parseInt(b) - Number.parseInt(a)) : []
        return (
          <div className="space-y-8">
            <div className="text-center">
              <h2 className="text-3xl font-bold tracking-tight mb-2">Select Year</h2>
              <p className="text-muted-foreground">Available years for {selectedSubject} - {selectedSession}</p>
            </div>
            <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 max-w-5xl mx-auto">
              {years.map((year) => (
                <Button key={year} variant="outline" size="lg" onClick={() => handleSelectYear(year)} className="h-16 text-lg font-semibold hover:bg-primary hover:text-primary-foreground hover:border-primary transition-all duration-200 hover:scale-105">
                  <div className="flex flex-col items-center gap-1"><Clock className="h-4 w-4" />{year}</div>
                </Button>
              ))}
            </div>
          </div>
        )
      }
      case "papers": {
        const yearData = selectedSubject && selectedSession && selectedYear ? papers[selectedSubject][selectedSession][selectedYear] : { sessionDocs: { er: null, gt: null }, paperList: [] }
        const { sessionDocs, paperList } = yearData

        const groupedPapers = paperList.reduce<Record<string, PaperSet[]>>((acc, paper) => {
          const groupName = paper.series.match(/^(Paper\s+\d+)/)?.[1] || "Uncategorized Papers"
          if (!acc[groupName]) acc[groupName] = []
          acc[groupName].push(paper); return acc
        }, {})

        Object.values(groupedPapers).forEach((group) => group.sort((a, b) => a.series.localeCompare(b.series)))
        const sortedGroupNames = Object.keys(groupedPapers).sort((a, b) => (Number.parseInt(a.replace(/\D/g, "")) || 999) - (Number.parseInt(b.replace(/\D/g, "")) || 999))

        return (
          <div className="space-y-8">
            <div className="text-center">
              <h2 className="text-3xl font-bold tracking-tight mb-2">Available Papers</h2>
              <p className="text-muted-foreground">{selectedSubject} • {selectedSession} • {selectedYear}</p>
            </div>
            <SessionDocuments er={sessionDocs.er} gt={sessionDocs.gt} onLinkClick={handleLinkClick} />
            {paperList.length > 0 ? (
              <div className="space-y-12 max-w-7xl mx-auto">
                {sortedGroupNames.map((groupName) => (
                  <div key={groupName}>
                    <h3 className="text-2xl font-semibold mb-6 border-b pb-3 flex items-center gap-3"><BookOpen className="h-6 w-6 text-primary" />{groupName}</h3>
                    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                      {groupedPapers[groupName].map((paper) => (<PaperCard key={paper.id} paper={paper} groupName={groupName} onLinkClick={handleLinkClick} />))}
                    </div>
                  </div>
                ))}
              </div>
            ) : (<EmptyState icon={FileX} title="No Papers Found" message="No papers are available for this selection. Please try a different year or session." />)}
          </div>
        )
      }
      case "subjects":
      default:
        return (
          <div className="space-y-12">
            <div className="text-center space-y-6">
              <div className="mx-auto mb-6 p-4 bg-primary/10 rounded-full w-fit"><GraduationCap className="h-16 w-16 text-primary" /></div>
              <h1 className="text-4xl font-bold tracking-tighter sm:text-5xl md:text-6xl bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">Past Papers Archive</h1>
              <p className="max-w-2xl mx-auto text-lg text-muted-foreground leading-relaxed">Access a comprehensive collection of past examination papers. Hover over a subject below to select a session and explore available years.</p>
            </div>
            {subjects.length > 0 ? (
              <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 max-w-5xl mx-auto">
                {subjects.map((subject) => (<SessionSelector key={subject} subject={subject} sessions={Object.keys(papers[subject])} onSelectSession={(session) => handleSelectSession(subject, session)} />))}
              </div>
            ) : (
              <Card className="max-w-2xl mx-auto border-destructive/50">
                <CardHeader className="text-center"><div className="mx-auto mb-4 p-4 bg-destructive/10 rounded-full w-fit"><FileX className="h-12 w-12 text-destructive" /></div><CardTitle className="text-destructive text-2xl">No Data Found</CardTitle></CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-muted-foreground text-center">The papers database appears to be empty. Please check the following:</p>
                  <div className="bg-muted/50 rounded-lg p-4"><ul className="space-y-2 text-sm text-muted-foreground">
                    <li className="flex items-start gap-2"><div className="h-1.5 w-1.5 rounded-full bg-primary mt-2 flex-shrink-0" />Ensure PDF files are in <code className="bg-muted px-1 rounded">public/Past Paper/[Subject]/...</code></li>
                    <li className="flex items-start gap-2"><div className="h-1.5 w-1.5 rounded-full bg-primary mt-2 flex-shrink-0" />Run <code className="bg-muted px-1 rounded">npm run dev</code> to generate the data file</li>
                  </ul></div>
                </CardContent>
              </Card>
            )}
          </div>
        )
    }
  }

  const breadcrumbSteps = [selectedSubject, selectedSession, selectedYear].filter(Boolean) as string[]

  return (
    <Layout>
      <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted/20">
        <div className="container mx-auto px-4 py-8 lg:py-12">
          {isLoading && <LoadingOverlay />}
          {view !== "subjects" && (
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-8">
              <Breadcrumbs steps={breadcrumbSteps} onNavigate={handleBreadcrumbNavigate} />
              <Button variant="outline" onClick={handleBack} className="flex items-center gap-2 hover:bg-primary hover:text-primary-foreground transition-colors w-fit bg-transparent">
                <ArrowLeft className="h-4 w-4" />Back
              </Button>
            </div>
          )}
          {renderContent()}
        </div>
      </div>
    </Layout>
  )
}

export default PastPapers